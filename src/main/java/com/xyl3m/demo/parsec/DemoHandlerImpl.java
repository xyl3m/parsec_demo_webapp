//
// This file is generated by parsec-rdl-gen (development version)
// WILL NOT be auto-generated if file has already existed.
//

package com.xyl3m.demo.parsec;

import com.xyl3m.demo.parsec.bo.UserBo;
import com.xyl3m.demo.parsec.enumtype.ResourceExceptionType;
import com.xyl3m.demo.parsec.parsec_generated.DemoHandler;
import com.xyl3m.demo.parsec.parsec_generated.ResourceContext;
import com.xyl3m.demo.parsec.parsec_generated.User;
import com.xyl3m.demo.parsec.parsec_generated.Users;
import com.xyl3m.demo.parsec.util.ResourceExceptionBuilder;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * DemoHandlerImpl is interface implementation that implement DemoHandler interface.
 */
public class DemoHandlerImpl implements DemoHandler {

  @Inject
  private transient UserBo userBo;

  /**
   * POST users.
   *
   * @param context resource context
   * @param user    User instance
   * @return User
   */
  @Override
  public User createUser(ResourceContext context, User user) {
    return userBo.createUser(user);
  }

  /**
   * GET users.
   *
   * @param context resource context
   * @param userId  user ID
   * @return User
   */
  @Override
  public User getUser(ResourceContext context, Integer userId) {
    return userBo.getUser(userId);
  }

  /**
   * QUERY users.
   *
   * @param context resource context
   * @param id      user ID
   * @param name    user name
   * @return Users
   */
  @Override
  public Users queryUsers(ResourceContext context, Integer id, String name, Integer offset,
      Integer limit) {
    return userBo.queryUsers(id, name, offset, limit);
  }

  /**
   * PUT users.
   *
   * @param context resource context
   * @param user    User instance
   * @return User
   */
  @Override
  public User updateUser(ResourceContext context, Integer id, User user) {
    if (null == user.getId() || !user.getId().equals(id)) {
      throw new ResourceExceptionBuilder().build(ResourceExceptionType.INVALID_USER_ID);
    }
    return userBo.updateUser(id, user);
  }

  /**
   * DELETE users.
   *
   * @param context resource context
   * @param id      user ID
   */
  @Override
  public void deleteUser(ResourceContext context, Integer id) {
    userBo.deleteUser(id);
    context.response().setStatus(HttpServletResponse.SC_NO_CONTENT);
  }

  /**
   * Prepare ResourceContext from servlet request and response.
   *
   * @param request  HttpServletRequest instance
   * @param response HttpServletResponse instance
   * @return ResourceContext
   */
  @Override
  public ResourceContext newResourceContext(HttpServletRequest request,
      HttpServletResponse response) {
    return new DefaultResourceContext(request, response);
  }

}
